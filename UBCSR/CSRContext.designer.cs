#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UBCSR
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-UBCSR-20160203174442")]
	public partial class CSRContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItemCategoryType(ItemCategoryType instance);
    partial void UpdateItemCategoryType(ItemCategoryType instance);
    partial void DeleteItemCategoryType(ItemCategoryType instance);
    partial void InsertItemCategory(ItemCategory instance);
    partial void UpdateItemCategory(ItemCategory instance);
    partial void DeleteItemCategory(ItemCategory instance);
    partial void InsertItemBrand(ItemBrand instance);
    partial void UpdateItemBrand(ItemBrand instance);
    partial void DeleteItemBrand(ItemBrand instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertInventoryLINQ(InventoryLINQ instance);
    partial void UpdateInventoryLINQ(InventoryLINQ instance);
    partial void DeleteInventoryLINQ(InventoryLINQ instance);
    partial void InsertReservationItem(ReservationItem instance);
    partial void UpdateReservationItem(ReservationItem instance);
    partial void DeleteReservationItem(ReservationItem instance);
    partial void InsertReservation(Reservation instance);
    partial void UpdateReservation(Reservation instance);
    partial void DeleteReservation(Reservation instance);
    partial void InsertGroupLINQ(GroupLINQ instance);
    partial void UpdateGroupLINQ(GroupLINQ instance);
    partial void DeleteGroupLINQ(GroupLINQ instance);
    partial void InsertAccountLINQ(AccountLINQ instance);
    partial void UpdateAccountLINQ(AccountLINQ instance);
    partial void DeleteAccountLINQ(AccountLINQ instance);
    #endregion
		
		public CSRContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["aspnet_UBCSR_20160203174442ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CSRContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSRContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSRContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSRContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ItemCategoryType> ItemCategoryTypes
		{
			get
			{
				return this.GetTable<ItemCategoryType>();
			}
		}
		
		public System.Data.Linq.Table<ItemCategory> ItemCategories
		{
			get
			{
				return this.GetTable<ItemCategory>();
			}
		}
		
		public System.Data.Linq.Table<ItemBrand> ItemBrands
		{
			get
			{
				return this.GetTable<ItemBrand>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<InventoryLINQ> InventoryLINQs
		{
			get
			{
				return this.GetTable<InventoryLINQ>();
			}
		}
		
		public System.Data.Linq.Table<ReservationItem> ReservationItems
		{
			get
			{
				return this.GetTable<ReservationItem>();
			}
		}
		
		public System.Data.Linq.Table<Reservation> Reservations
		{
			get
			{
				return this.GetTable<Reservation>();
			}
		}
		
		public System.Data.Linq.Table<GroupLINQ> GroupLINQs
		{
			get
			{
				return this.GetTable<GroupLINQ>();
			}
		}
		
		public System.Data.Linq.Table<AccountLINQ> AccountLINQs
		{
			get
			{
				return this.GetTable<AccountLINQ>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCategoryType")]
	public partial class ItemCategoryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CategoryType;
		
		private EntitySet<ItemCategory> _ItemCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryTypeChanging(string value);
    partial void OnCategoryTypeChanged();
    #endregion
		
		public ItemCategoryType()
		{
			this._ItemCategories = new EntitySet<ItemCategory>(new Action<ItemCategory>(this.attach_ItemCategories), new Action<ItemCategory>(this.detach_ItemCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryType", DbType="VarChar(50)")]
		public string CategoryType
		{
			get
			{
				return this._CategoryType;
			}
			set
			{
				if ((this._CategoryType != value))
				{
					this.OnCategoryTypeChanging(value);
					this.SendPropertyChanging();
					this._CategoryType = value;
					this.SendPropertyChanged("CategoryType");
					this.OnCategoryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategoryType_ItemCategory", Storage="_ItemCategories", ThisKey="Id", OtherKey="CategoryTypeId")]
		public EntitySet<ItemCategory> ItemCategories
		{
			get
			{
				return this._ItemCategories;
			}
			set
			{
				this._ItemCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemCategories(ItemCategory entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategoryType = this;
		}
		
		private void detach_ItemCategories(ItemCategory entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategoryType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCategory")]
	public partial class ItemCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CategoryName;
		
		private System.Nullable<int> _CategoryTypeId;
		
		private EntitySet<Item> _Items;
		
		private EntityRef<ItemCategoryType> _ItemCategoryType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryTypeIdChanging(System.Nullable<int> value);
    partial void OnCategoryTypeIdChanged();
    #endregion
		
		public ItemCategory()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._ItemCategoryType = default(EntityRef<ItemCategoryType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(MAX)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryTypeId", DbType="Int")]
		public System.Nullable<int> CategoryTypeId
		{
			get
			{
				return this._CategoryTypeId;
			}
			set
			{
				if ((this._CategoryTypeId != value))
				{
					if (this._ItemCategoryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryTypeId = value;
					this.SendPropertyChanged("CategoryTypeId");
					this.OnCategoryTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_Items", ThisKey="Id", OtherKey="ItemCategoryId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategoryType_ItemCategory", Storage="_ItemCategoryType", ThisKey="CategoryTypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ItemCategoryType ItemCategoryType
		{
			get
			{
				return this._ItemCategoryType.Entity;
			}
			set
			{
				ItemCategoryType previousValue = this._ItemCategoryType.Entity;
				if (((previousValue != value) 
							|| (this._ItemCategoryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemCategoryType.Entity = null;
						previousValue.ItemCategories.Remove(this);
					}
					this._ItemCategoryType.Entity = value;
					if ((value != null))
					{
						value.ItemCategories.Add(this);
						this._CategoryTypeId = value.Id;
					}
					else
					{
						this._CategoryTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemCategoryType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemBrand")]
	public partial class ItemBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BrandName;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandNameChanging(string value);
    partial void OnBrandNameChanged();
    #endregion
		
		public ItemBrand()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandName", DbType="VarChar(MAX)")]
		public string BrandName
		{
			get
			{
				return this._BrandName;
			}
			set
			{
				if ((this._BrandName != value))
				{
					this.OnBrandNameChanging(value);
					this.SendPropertyChanging();
					this._BrandName = value;
					this.SendPropertyChanged("BrandName");
					this.OnBrandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemBrand_Item", Storage="_Items", ThisKey="Id", OtherKey="ItemBrandId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemBrand = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemBrand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ItemCategoryId;
		
		private System.Nullable<int> _ItemBrandId;
		
		private string _ItemName;
		
		private EntitySet<InventoryLINQ> _InventoryLINQs;
		
		private EntityRef<ItemBrand> _ItemBrand;
		
		private EntityRef<ItemCategory> _ItemCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemCategoryIdChanging(System.Nullable<int> value);
    partial void OnItemCategoryIdChanged();
    partial void OnItemBrandIdChanging(System.Nullable<int> value);
    partial void OnItemBrandIdChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    #endregion
		
		public Item()
		{
			this._InventoryLINQs = new EntitySet<InventoryLINQ>(new Action<InventoryLINQ>(this.attach_InventoryLINQs), new Action<InventoryLINQ>(this.detach_InventoryLINQs));
			this._ItemBrand = default(EntityRef<ItemBrand>);
			this._ItemCategory = default(EntityRef<ItemCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCategoryId", DbType="Int")]
		public System.Nullable<int> ItemCategoryId
		{
			get
			{
				return this._ItemCategoryId;
			}
			set
			{
				if ((this._ItemCategoryId != value))
				{
					if (this._ItemCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ItemCategoryId = value;
					this.SendPropertyChanged("ItemCategoryId");
					this.OnItemCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemBrandId", DbType="Int")]
		public System.Nullable<int> ItemBrandId
		{
			get
			{
				return this._ItemBrandId;
			}
			set
			{
				if ((this._ItemBrandId != value))
				{
					if (this._ItemBrand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemBrandIdChanging(value);
					this.SendPropertyChanging();
					this._ItemBrandId = value;
					this.SendPropertyChanged("ItemBrandId");
					this.OnItemBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(MAX)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_InventoryLINQ", Storage="_InventoryLINQs", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<InventoryLINQ> InventoryLINQs
		{
			get
			{
				return this._InventoryLINQs;
			}
			set
			{
				this._InventoryLINQs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemBrand_Item", Storage="_ItemBrand", ThisKey="ItemBrandId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ItemBrand ItemBrand
		{
			get
			{
				return this._ItemBrand.Entity;
			}
			set
			{
				ItemBrand previousValue = this._ItemBrand.Entity;
				if (((previousValue != value) 
							|| (this._ItemBrand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemBrand.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemBrand.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ItemBrandId = value.Id;
					}
					else
					{
						this._ItemBrandId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemBrand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_ItemCategory", ThisKey="ItemCategoryId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ItemCategory ItemCategory
		{
			get
			{
				return this._ItemCategory.Entity;
			}
			set
			{
				ItemCategory previousValue = this._ItemCategory.Entity;
				if (((previousValue != value) 
							|| (this._ItemCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemCategory.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemCategory.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ItemCategoryId = value.Id;
					}
					else
					{
						this._ItemCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryLINQs(InventoryLINQ entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_InventoryLINQs(InventoryLINQ entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class InventoryLINQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ItemId;
		
		private System.Nullable<int> _Stocks;
		
		private System.Nullable<System.DateTime> _Expiration;
		
		private string _Serial;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private string _Remarks;
		
		private EntitySet<ReservationItem> _ReservationItems;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemIdChanging(System.Nullable<int> value);
    partial void OnItemIdChanged();
    partial void OnStocksChanging(System.Nullable<int> value);
    partial void OnStocksChanged();
    partial void OnExpirationChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public InventoryLINQ()
		{
			this._ReservationItems = new EntitySet<ReservationItem>(new Action<ReservationItem>(this.attach_ReservationItems), new Action<ReservationItem>(this.detach_ReservationItems));
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stocks", DbType="Int")]
		public System.Nullable<int> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				if ((this._Stocks != value))
				{
					this.OnStocksChanging(value);
					this.SendPropertyChanging();
					this._Stocks = value;
					this.SendPropertyChanged("Stocks");
					this.OnStocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiration", DbType="DateTime")]
		public System.Nullable<System.DateTime> Expiration
		{
			get
			{
				return this._Expiration;
			}
			set
			{
				if ((this._Expiration != value))
				{
					this.OnExpirationChanging(value);
					this.SendPropertyChanging();
					this._Expiration = value;
					this.SendPropertyChanged("Expiration");
					this.OnExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serial", DbType="VarChar(50)")]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryLINQ_ReservationItem", Storage="_ReservationItems", ThisKey="Id", OtherKey="InventoryId")]
		public EntitySet<ReservationItem> ReservationItems
		{
			get
			{
				return this._ReservationItems;
			}
			set
			{
				this._ReservationItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_InventoryLINQ", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.InventoryLINQs.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.InventoryLINQs.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationItems(ReservationItem entity)
		{
			this.SendPropertyChanging();
			entity.InventoryLINQ = this;
		}
		
		private void detach_ReservationItems(ReservationItem entity)
		{
			this.SendPropertyChanging();
			entity.InventoryLINQ = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationItem")]
	public partial class ReservationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _InventoryId;
		
		private System.Nullable<int> _Quantity;
		
		private string _Status;
		
		private System.Nullable<int> _ReservationId;
		
		private EntityRef<InventoryLINQ> _InventoryLINQ;
		
		private EntityRef<Reservation> _Reservation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInventoryIdChanging(System.Nullable<int> value);
    partial void OnInventoryIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnReservationIdChanging(System.Nullable<int> value);
    partial void OnReservationIdChanged();
    #endregion
		
		public ReservationItem()
		{
			this._InventoryLINQ = default(EntityRef<InventoryLINQ>);
			this._Reservation = default(EntityRef<Reservation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryId", DbType="Int")]
		public System.Nullable<int> InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					if (this._InventoryLINQ.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationId", DbType="Int")]
		public System.Nullable<int> ReservationId
		{
			get
			{
				return this._ReservationId;
			}
			set
			{
				if ((this._ReservationId != value))
				{
					if (this._Reservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationIdChanging(value);
					this.SendPropertyChanging();
					this._ReservationId = value;
					this.SendPropertyChanged("ReservationId");
					this.OnReservationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryLINQ_ReservationItem", Storage="_InventoryLINQ", ThisKey="InventoryId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public InventoryLINQ InventoryLINQ
		{
			get
			{
				return this._InventoryLINQ.Entity;
			}
			set
			{
				InventoryLINQ previousValue = this._InventoryLINQ.Entity;
				if (((previousValue != value) 
							|| (this._InventoryLINQ.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryLINQ.Entity = null;
						previousValue.ReservationItems.Remove(this);
					}
					this._InventoryLINQ.Entity = value;
					if ((value != null))
					{
						value.ReservationItems.Add(this);
						this._InventoryId = value.Id;
					}
					else
					{
						this._InventoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InventoryLINQ");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationItem", Storage="_Reservation", ThisKey="ReservationId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Reservation Reservation
		{
			get
			{
				return this._Reservation.Entity;
			}
			set
			{
				Reservation previousValue = this._Reservation.Entity;
				if (((previousValue != value) 
							|| (this._Reservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reservation.Entity = null;
						previousValue.ReservationItems.Remove(this);
					}
					this._Reservation.Entity = value;
					if ((value != null))
					{
						value.ReservationItems.Add(this);
						this._ReservationId = value.Id;
					}
					else
					{
						this._ReservationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Reservation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservation")]
	public partial class Reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _Subject;
		
		private string _ExperimentNo;
		
		private System.Nullable<System.DateTime> _DateRequested;
		
		private System.Nullable<System.DateTime> _DateFrom;
		
		private string _LabRoom;
		
		private string _Status;
		
		private string _ApprovalStatus;
		
		private System.Nullable<System.DateTime> _DateTo;
		
		private EntitySet<ReservationItem> _ReservationItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnExperimentNoChanging(string value);
    partial void OnExperimentNoChanged();
    partial void OnDateRequestedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRequestedChanged();
    partial void OnDateFromChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFromChanged();
    partial void OnLabRoomChanging(string value);
    partial void OnLabRoomChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnApprovalStatusChanging(string value);
    partial void OnApprovalStatusChanged();
    partial void OnDateToChanging(System.Nullable<System.DateTime> value);
    partial void OnDateToChanged();
    #endregion
		
		public Reservation()
		{
			this._ReservationItems = new EntitySet<ReservationItem>(new Action<ReservationItem>(this.attach_ReservationItems), new Action<ReservationItem>(this.detach_ReservationItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(50)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExperimentNo", DbType="VarChar(50)")]
		public string ExperimentNo
		{
			get
			{
				return this._ExperimentNo;
			}
			set
			{
				if ((this._ExperimentNo != value))
				{
					this.OnExperimentNoChanging(value);
					this.SendPropertyChanging();
					this._ExperimentNo = value;
					this.SendPropertyChanged("ExperimentNo");
					this.OnExperimentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRequested", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateRequested
		{
			get
			{
				return this._DateRequested;
			}
			set
			{
				if ((this._DateRequested != value))
				{
					this.OnDateRequestedChanging(value);
					this.SendPropertyChanging();
					this._DateRequested = value;
					this.SendPropertyChanged("DateRequested");
					this.OnDateRequestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateFrom
		{
			get
			{
				return this._DateFrom;
			}
			set
			{
				if ((this._DateFrom != value))
				{
					this.OnDateFromChanging(value);
					this.SendPropertyChanging();
					this._DateFrom = value;
					this.SendPropertyChanged("DateFrom");
					this.OnDateFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabRoom", DbType="VarChar(50)")]
		public string LabRoom
		{
			get
			{
				return this._LabRoom;
			}
			set
			{
				if ((this._LabRoom != value))
				{
					this.OnLabRoomChanging(value);
					this.SendPropertyChanging();
					this._LabRoom = value;
					this.SendPropertyChanged("LabRoom");
					this.OnLabRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalStatus", DbType="VarChar(50)")]
		public string ApprovalStatus
		{
			get
			{
				return this._ApprovalStatus;
			}
			set
			{
				if ((this._ApprovalStatus != value))
				{
					this.OnApprovalStatusChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatus = value;
					this.SendPropertyChanged("ApprovalStatus");
					this.OnApprovalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationItem", Storage="_ReservationItems", ThisKey="Id", OtherKey="ReservationId")]
		public EntitySet<ReservationItem> ReservationItems
		{
			get
			{
				return this._ReservationItems;
			}
			set
			{
				this._ReservationItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationItems(ReservationItem entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = this;
		}
		
		private void detach_ReservationItems(ReservationItem entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class GroupLINQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _YearFrom;
		
		private string _YearTo;
		
		private string _Sem;
		
		private System.Nullable<System.Guid> _LeaderUserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearFromChanging(string value);
    partial void OnYearFromChanged();
    partial void OnYearToChanging(string value);
    partial void OnYearToChanged();
    partial void OnSemChanging(string value);
    partial void OnSemChanged();
    partial void OnLeaderUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnLeaderUserIdChanged();
    #endregion
		
		public GroupLINQ()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearFrom", DbType="VarChar(50)")]
		public string YearFrom
		{
			get
			{
				return this._YearFrom;
			}
			set
			{
				if ((this._YearFrom != value))
				{
					this.OnYearFromChanging(value);
					this.SendPropertyChanging();
					this._YearFrom = value;
					this.SendPropertyChanged("YearFrom");
					this.OnYearFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearTo", DbType="VarChar(50)")]
		public string YearTo
		{
			get
			{
				return this._YearTo;
			}
			set
			{
				if ((this._YearTo != value))
				{
					this.OnYearToChanging(value);
					this.SendPropertyChanging();
					this._YearTo = value;
					this.SendPropertyChanged("YearTo");
					this.OnYearToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sem", DbType="VarChar(50)")]
		public string Sem
		{
			get
			{
				return this._Sem;
			}
			set
			{
				if ((this._Sem != value))
				{
					this.OnSemChanging(value);
					this.SendPropertyChanging();
					this._Sem = value;
					this.SendPropertyChanged("Sem");
					this.OnSemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaderUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LeaderUserId
		{
			get
			{
				return this._LeaderUserId;
			}
			set
			{
				if ((this._LeaderUserId != value))
				{
					this.OnLeaderUserIdChanging(value);
					this.SendPropertyChanging();
					this._LeaderUserId = value;
					this.SendPropertyChanged("LeaderUserId");
					this.OnLeaderUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class AccountLINQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _FirstName;
		
		private string _StudentId;
		
		private System.Nullable<int> _GroupId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    #endregion
		
		public AccountLINQ()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(MAX)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="VarChar(MAX)")]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
